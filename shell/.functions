# vim: filetype=sh

# ==============================================================================
# Functions
# ==============================================================================

# Requires yazi, which is installed via Brewfile
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

##
# Reloads your current $SHELL
##

reload!() {
  if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
    source $HOME/.zshrc
  elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
    source $HOME/.bashrc
  else
    echo "Unknown shell?! in function reload!"
  fi
}

# A function to clone a repository in the $CLONE_DIR directory,
# and change into the newly cloned repository.
clone-cd() {
  start_cd=$(pwd)
  input=$1
  owner_and_path=`echo ${input} | sed 's!/! !'`
  owner=$(echo ${owner_and_path} | awk '{ print $1 }')
  repo=$(echo ${owner_and_path} | awk '{ print $2 }')

  # one arg is passed in, so it must be the repo
  if [ -z ${repo} ]; then
    repo=${owner}
    unset owner
    full_path=${repo}
  else
    full_path="${owner}/${repo}"
  fi

  clone_dir=${CLONE_DIR:-"$HOME/me"}

  if [ ! -d ${clone_dir} ]; then
    mkdir ${clone_dir}
  fi

  cd ${clone_dir}

  clone_exit_code=1
  if [ ! -d ${full_path} ]; then
    clone ${full_path}

    # TODO -- fix `clone` to return a non-zero
    # exit code if it fails to clone
    # clone_exit_code=$?
    if [ -d ${repo} ]; then
      clone_exit_code=0
    fi
  else
    clone_exit_code=0
  fi

  if [[ ${clone_exit_code} -eq 0 ]]; then
    cd ${repo}
  else
    cd ${start_cd}
  fi
}
