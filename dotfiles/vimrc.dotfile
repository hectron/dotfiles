" This config uses Plug (https://github.com/junegunn/vim-plug)
" Heavily inspired by Zach Taylor's [init.vim](https://github.com/taylorzr/dotfiles/blob/master/.config/nvim/init.vim)
"
" Auto install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on

" Set utf-8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use unix as the standard file type
set ffs=unix,dos,mac

" 256 color term
set t_Co=256

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Space and tabs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number
set cursorline
set autoindent
set smartindent
set textwidth=80

" Apply automatic 80 width of characters
au BufRead,BufNewFile *.md setlocal textwidth=80

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => UI Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always show current position
set ruler
set cmdheight=2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Searching
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ignore case when searching
set ignorecase
set smartcase

" Highlight results
set hlsearch
set incsearch

" Don't redraw while executing macros
set lazyredraw
set magic
set showmatch

set expandtab

" Be smart when using tabs ;)
set smarttab

" don't wrap lines
set nowrap

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Show invisble characters
set list

" backspace through everything in insert mode
set backspace=indent,eol,start

" List Chars

set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the left of the screen

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Wild settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

""
"" Backup and swap files
""

set backupdir^=~/.vim/_backup//    " where to put backup files.
set directory^=~/.vim/_temp//      " where to put swap files.


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows, buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("statusline")
  " Always show the status line
  set laststatus=2

  " Start the status line
  set statusline=%f\ %m\ %r
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=Col:%v
  set statusline+=Buf:#%n
  set statusline+=[%b][0x%B]
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins and what has you
"
" ack
" ctrlp
" gitgutter
" nerdtree
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Install with :PlugInstall
" Clean with :PlugClean
call plug#begin('~/.config/nvim/plugged') " Need to update?

Plug 'mileszs/ack.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-commentary' " Easily comment

Plug 'tpope/vim-fugitive'   " Git blame, diff, browse, etc
  nnoremap <Leader>gd :Gdiff<CR>
  nnoremap <Leader>gb :Gblame<CR>
  nnoremap <Leader>gw :Gbrowse-<CR>
  nnoremap <Leader>gr :Gread<CR>

Plug 'tpope/vim-rhubarb'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'

Plug 'leafgarland/typescript-vim'
Plug 'junegunn/goyo.vim'

call plug#end()

" Expand if called on a directory e.g. `vim .`
"if isdirectory(argv(0))
"  bd
"  autocmd vimenter * exe "cd" argv(0)
"  autocmd vimenter * NERDTree
"endif

" Close NERDTree if it's the last thing open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ignore these kinds of files in NERDTree
let NERDTreeIgnore = ['\.pyc$'] " can be comma-delimited

" Ignore these kinds of files in CtrlP, if in a .gitignore file
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" let g:pymode_options_max_line_length = 120 " For some stupid reason, this does not recognize the pylint.rc file
" let g:pymode_doc = 0
" 
" autocmd FileType python set colorcolumn=120
" 
" colorscheme badwolf
" 
" let g:badwolf_darkgutter = 1
" 
" " When you type `jj` it escapes.
inoremap jj <Esc>

set clipboard=unnamed

let g:LanguageClient_serverCommands = {
    \ 'go':         ['gopls'],
    \ 'ruby':       ['solargraph', 'stdio'],
    \ 'typescript': ['typescript-language-server', '--stdio'],
    \ }

" A cool function to add a timestamp to a file on save
" Usage: :SWT <filename>
function! SaveWithTimestamp(filename) range
  let l:extension = '.' .fnamemodify(a:filename, ':e')

  if len(l:extension) == 1
    let l:extension = '.md'
  endif

  let l:filename = escape( fnamemodify(a:filename, ':r') . strftime("-%Y%m%d") . l:extension, ' ')

  execute "write " . l:filename
endfunction

command! -nargs=1 SWT call SaveWithTimestamp( <q-args> )
